name: Yak

on:
  push:
    branches:
     - main
  release:
    types:
      - published

defaults:
  run:
    shell: pwsh 

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macOS-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Cache
      uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: |
        if ($env:TAG_NAME -ne "") {
          $Version = $([Regex]::Matches($env:TAG_NAME, "v(\d+(?:\.\d+)+(?:-\w+)?)").groups | Where-Object Name -eq 1).value
        } else {
          $Version = "0.0.0"
        }
        Write-Output "Version = $Version"
        dotnet msbuild -p:RestorePackages=false -p:Configuration=Release -p:DebugSymbols=false -p:DebugType=None -p:Version=$Version
      env:
        TAG_NAME: ${{ github.event.release.tag_name }}

    - name: Upload packages
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.os }}
        path: ./EQlib.Mkl.Plugin/bin/*

  upload_all:
    name: Upload if release
    needs: [build]
    runs-on: windows-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - name: Download Yak
      run: |
        New-Item -ItemType Directory -Path "tools"
        $ToolsPath = Resolve-Path "./tools"
        Write-Output "$ToolsPath" | Out-File -FilePath "$env:GITHUB_PATH" -Encoding utf8 -Append
        Invoke-WebRequest "https://files.mcneel.com/yak/tools/latest/yak.exe" -OutFile "tools/yak.exe"

    - name: Download builds
      uses: actions/download-artifact@v3

    - name: Build Yak Package for Windows
      run: |
        yak spec
        yak build --platform win
      working-directory: build-windows-latest
      
    - name: Build Yak Package for macOS
      run: |
        yak spec
        yak build --platform mac
      working-directory: build-macOS-latest

    - name: Push Yak Packages
      run: |
        & yak login
        Get-ChildItem "build-windows-latest" -Filter "*.yak" | Foreach-Object {
            & yak push $_.FullName
        }
        Get-ChildItem "build-macOS-latest" -Filter "*.yak" | Foreach-Object {
            & yak push $_.FullName
        }
      env:
        YAK_TOKEN: ${{ secrets.YAK_TOKEN }}
